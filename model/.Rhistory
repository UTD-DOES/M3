colnames(data_tst_msii1_) <- c(colnames(data_tst_msii1_)[1:2],colnames(data_testing)[5:(ncol(data_training)-1)], 'target')
colnames(data_tst_msii2_) <- c(colnames(data_trn_msii1_)[1:2],colnames(data_testing)[5:(ncol(data_training)-1)], 'target')
colnames(data_tst_msii3_) <- c(colnames(data_trn_msii1_)[1:2],colnames(data_testing)[5:(ncol(data_training)-1)], 'target')
# normalization
list_norm_ii1 <- data_normalization1(data_trn_msii1_)
data_trn_msii1 <- list_norm_ii1[[1]]
min_max_ii1 <- list_norm_ii1[[2]]
data_tst_msii1 <- data_normalization2(data_tst_msii1_, min_max_ii1)
list_norm_ii2 <- data_normalization1(data_trn_msii2_)
data_trn_msii2 <- list_norm_ii2[[1]]
min_max_ii2 <- list_norm_ii2[[2]]
data_tst_msii2 <- data_normalization2(data_tst_msii2_, min_max_ii2)
list_norm_ii3 <- data_normalization1(data_trn_msii3_)
data_trn_msii3 <- list_norm_ii3[[1]]
min_max_ii3 <- list_norm_ii3[[2]]
data_tst_msii3 <- data_normalization2(data_tst_msii3_, min_max_ii3)
#------------------ prepare data for the machine learning benchmarks ---------------------
# training data
data_trn_bench <- data_training[data_training$Hour %in% c(7:18), -1]
# testing data
data_tst_bench <- data_testing[data_testing$Hour %in% c(7:18), -1]
# normalization
list_norm_bench <- data_normalization1(data_trn_bench)
data_trn_trnn <- list_norm_bench[[1]]
min_max_bench <- list_norm_bench[[2]]
data_tst_tstn <- data_normalization2(data_tst_bench, min_max_bench)
#--------------- train and forecasting with the MMFF framework (11:00 - 19:00) ------------------
# MSII forecasting: same-hour MMFF
result_forc <- MMFF(FALSE, data_trn_msii1, data_tst_msii1, root_MMFF, root_save, p1)
results_msii1 <- data.frame(data_denormalization(data_tst_msii1[,1:2], min_max_ii1[,1:2]),rep(8,nrow(data_tst_msii1)),
data_denormalization(result_forc,data.frame(rep(min_max_ii1[length(min_max_ii1)],ncol(result_forc)))))
result_forc <- MMFF(FALSE, data_trn_msii2, data_tst_msii2, root_MMFF, root_save, p1)
results_msii2 <- data.frame(data_denormalization(data_tst_msii2[,1:2], min_max_ii2[,1:2]),rep(9,nrow(data_tst_msii2)),
data_denormalization(result_forc,data.frame(rep(min_max_ii2[length(min_max_ii2)],ncol(result_forc)))))
result_forc <- MMFF(FALSE, data_trn_msii3, data_tst_msii3, root_MMFF, root_save, p1)
results_msii3 <- data.frame(data_denormalization(data_tst_msii3[,1:2], min_max_ii3[,1:2]),rep(10,nrow(data_tst_msii3)),
data_denormalization(result_forc,data.frame(rep(min_max_ii3[length(min_max_ii3)],ncol(result_forc)))))
colnames(results_msii1) <- c(colnames(results_msii1)[1:2],'Hour',colnames(results_msii1)[4:ncol(results_msii1)])
colnames(results_msii2) <- c(colnames(results_msii2)[1:2],'Hour',colnames(results_msii2)[4:ncol(results_msii2)])
colnames(results_msii3) <- c(colnames(results_msii3)[1:2],'Hour',colnames(results_msii3)[4:ncol(results_msii3)])
# MSIII forecasting: weather based MMFF
result_forc <- MMFF(FALSE, data_trn_msiii1, data_tst_msiii1, root_MMFF, root_save, p1)
results_msiii1 <- data.frame(data_denormalization(data_tst_msiii1[,1:3], min_max[,1:3]),
data_denormalization(result_forc,data.frame(rep(min_max[length(min_max)],ncol(result_forc)))))
result_forc <- MMFF(FALSE, data_trn_msiii2, data_tst_msiii2, root_MMFF, root_save, p1)
results_msiii2 <- data.frame(data_denormalization(data_tst_msiii2[,1:3], min_max[,1:3]),
data_denormalization(result_forc,data.frame(rep(min_max[length(min_max)],ncol(result_forc)))))
result_forc <-  MMFF(FALSE, data_trn_msiii3, data_tst_msiii3, root_MMFF, root_save, p1)
results_msiii3 <- data.frame(data_denormalization(data_tst_msiii3[,1:3], min_max[,1:3]),
data_denormalization(result_forc,data.frame(rep(min_max[length(min_max)],ncol(result_forc)))))
# MSI forecasting: persistence of cloudness
results_msi <- data.frame(matrix(0,nrow(data_testing_pr),5))
data_msi1 <- data_testing[data_testing$Hour == 7,]
data_msi2 <- data_raw[data_raw$Hour == 7,]
for(i in 2:nrow(results_msi)){
results_msi[i,1:3] <- data_msi1[i,2:4]
results_msi[i,4] <- data_msi2[(which(data_msi2[,2]==results_msi[i,1]&data_msi2[,3]==results_msi[i,2]&
data_msi2[,4]==results_msi[i,3])-1),'CSI']*data_msi2[which(data_msi2[,2]==results_msi[i,1]&
data_msi2[,3]==results_msi[i,2]&
data_msi2[,4]==results_msi[i,3]),'ClearSky_GHI']
}
results_msi[1,1:3] <- data_msi1[1,2:4]
results_msi[,5] <- data_testing[data_testing$Hour == 7,'Act_GHI']
colnames(results_msi) <- c('Month','Day','Hour','Persis','target')
#------------------------------------------ benchmark forecasting -------------------------------------------
# persistence of cloudness
result_bench_persis <- data.frame(matrix(0,nrow(data_testing),5))
result_bench_persis[,1:3] <- data_testing[,2:4]
result_bench_persis[,4] <- data_testing$Act_GHI
for(i in 1:nrow(data_testing_pr)){
#result_bench_persis[(1+13*(i-1)),5] <- data_testing[(1+13*(i-1)),'ClearSky_GHI']
result_bench_persis[(2+13*(i-1)):(13*i),5] <- data_testing[(2+13*(i-1)):(13*i),'ClearSky_GHI']*
data_testing[(1+13*(i-1)):(13*i-1),'CSI_GHI_1']
}
#result_bench_persis[,5] <- data_testing$GHI_P1
colnames(result_bench_persis) <- c('Month','Day','Hour','target','Persis')
# machine learning without weather-based classifcation
result_bench_ml_ <- MMFF(FALSE, data_trn_trnn, data_tst_tstn, root_MMFF, root_save, p2)
#--------------------------------  NOTE  ----------------------------------------
# 1 This code is the main function of Pattern Recognition based Solar Forecasting;
# 2 Coder: Cong Feng        Date: 2017/04/17       @ DOES Lab, UTD
# 3 Clustering method: http://www.statmethods.net/advstats/cluster.html
#--------------------------------------------------------------------------------
# clear R workspace and concole
rm(list=ls(all=TRUE))
cat("\014")
#---------------------- global variables -------------------------
time_horizon <- 1
part <- 3/4
#p1 <- .5
#p2 <- .82
#-----------------------------------------------------------------
# important entries
root_data <- '/Users/joeyfueng/Desktop/Rearch/Projects/Solar Forecasting/Solar Forecasting/solar_expand/data/'
root_data_b <- '/Users/joeyfueng/Desktop/Rearch/Projects/Solar Forecasting/Solar Forecasting/Results/'
root_code <- '/Users/joeyfueng/Desktop/Rearch/Projects/Solar Forecasting/Solar Forecasting/solar_expand/'
root_code2 <- root_code
root_MMFF <- '/Users/joeyfueng/Desktop/Rearch/Projects//DeapFeatureSelection/UTD_forecasting/1st_version/'
root_save <- '/Users/joeyfueng/Desktop/Rearch/Projects/Solar Forecasting/Solar Forecasting/solar_expand/results/2nd_time/Bench/'
#---------------------- load in data, functions, and packages ------------------------
data_raw <- data.frame(read.table(paste0(root_data,'compiled_data.csv'),header = TRUE,sep = ","))
data_raw1 <- data.frame(read.table(paste0(root_data,'comprehensive_data.csv'),header = TRUE,sep = ","))
#groups_b <- data.frame(read.table(paste0(root_data_b,'predetermined_cluster.csv'),header = TRUE,sep = ","))
# load in sub-functions
source(paste0(root_code,'format_data.R'))
source(paste0(root_code,'data_partition.R'))
source(paste0(root_code,'determine_nocluster.R'))
source(paste0(root_code,'PR_svm.R'))
source(paste0(root_code,'PR_evaluation.R'))
source(paste0(root_code,'data_normalization1.R'))
source(paste0(root_code,'data_normalization2.R'))
source(paste0(root_code,'data_denormalization.R'))
source(paste0(root_code,'MMFF.R'))
source(paste0(root_code2,'SAML_benchmarks.R'))
source(paste0(root_MMFF,'EvaMetrics.R'))
# load in packages
#library(KODAMA)
#library(tpe)
#library(fpc)
library(ggplot2)
library(stats)
#library(pvclust)
#library(mclust)
library(clValid)
library(kohonen)
library(base)
library(caret)
#---------------------- data preprocessing ---------------------
# compile data according to the forecasting horizons
data_th <- format_data(data_raw,time_horizon,'Act_GHI')
# data partition (month by month)
data_training <- NULL
data_testing <- NULL
set.seed(1)
for(i in 1:12){
data_monthly <- subset(data_th,Month==i)
data_plist <- data_partition(data_monthly,part)
data_training <- rbind(data_training,data.frame(data_plist[1]))
data_testing <- rbind(data_testing,data.frame(data_plist[2]))
}
#data_training <- stri_list2matrix(data_training, byrow = TRUE)
#  do.call("cbind", data_training)
#data_training <- data.frame(read.table(paste0(root_data,'data_training.csv'),header = TRUE,sep = ","))
#data_testing <- data.frame(read.table(paste0(root_data,'data_testing.csv'),header = TRUE,sep = ","))
# put the GHI data one day a row
data_all_days <- data.frame(matrix(0,nrow(data_th)/13,13))
for(i in 1:(nrow(data_th)/13)){
data_all_days[i,] <- data_th[(1+13*(i-1)):(13*i),'Act_GHI'] # use Act_GHI (best clustering) not CSI (determine K_opt)
}
#----------------------------------- Optimized Cross-validated ClUsteRing (OCCUR) method --------------------------------------
# setting up system time calculation
begtime_overall <-Sys.time()
# determine the optimal number of clusters
#n_cluster <- determine_nocluster(data_all_days,2,14,'euclidean',c("kmeans","pam","hierarchical",'diana'),c("internal"),root_save)#'clara'
n_cluster <- 3 # determined by cluster wrapper
#-------------------- Optimal Clustering ---------------------
# classification
d <- dist(data_all_days, method = "euclidean") # distance matrix
fit <- hclust(d, method="ward.D")
groups <- cutree(fit, k=n_cluster) # cut tree into 5 clusters
#groups <- as.vector(groups_b$class)
# change tags
for(i in 1:length(groups)){
if(groups[i] == 1) groups[i] <- 'A'
if(groups[i] == 2) groups[i] <- 'B'
if(groups[i] == 3) groups[i] <- 'C'
}
#for(i in 1:length(groups)){
#  if(groups[i] == 'C') groups[i] <- 'A'
#  if(groups[i] == 'P') groups[i] <- 'B'
#  if(groups[i] == 'S') groups[i] <- 'C'
#}
# create the weather type list
weather_type <- data.frame(matrix(0,nrow(data_th)/13,4))
weather_type <- cbind(data_th[data_th$Hour == 7,1:3],groups)
weather_type$groups <- as.character(weather_type$groups)
# runtime <- Sys.time()- begtime   # print caculation time
OCCUR_time <-  difftime(Sys.time(),begtime_overall,tz,
units = c( "mins")) # make sure the time unit is mins
cat("OCCUR Time (mins):", OCCUR_time, "\n")
#------------------------------- SVR-Pattern Recognition (SVR-PR) -------------------------------------
# train the pattern recognition model
# prepare the training data: first 4hrs data
data_training_pr <- data.frame(matrix(0,nrow(data_training)/13,4*(ncol(data_training)-4)))
for(i in 1:(nrow(data_training)/13)){
data_training_pr[i,1:3] <- data_training[((i-1)*13+1),1:3]
data_of_day <- NULL
for(j in 5:(ncol(data_training)-1)){
data_of_day_va <- as.vector(data_training[((i-1)*13+1):((i-1)*13+4),j])
data_of_day <- c(data_of_day, data_of_day_va)
}
data_training_pr[i,4:(ncol(data_training_pr)-1)] <- data_of_day
data_training_pr[i,ncol(data_training_pr)] <- weather_type[weather_type$Month == data_training_pr[i,2] & weather_type$Day == data_training_pr[i,3],4]
}
for(i in 1:(ncol(data_training)-5)){ # rename columns
for(j in 1:4){
colnames(data_training_pr)[((i-1)*4+j+3)] <- paste0(colnames(data_training)[(i+4)],j)
}
}
colnames(data_training_pr)[c(1:3,ncol(data_training_pr))] <- c('year','month','day','groups')
# prepare the testing data: first 4hrs data
data_testing_pr <- data.frame(matrix(0,nrow(data_testing)/13,4*(ncol(data_testing)-4)))
for(i in 1:(nrow(data_testing)/13)){
data_testing_pr[i,1:3] <- data_testing[((i-1)*13+1),1:3]
data_of_day <- NULL
for(j in 5:(ncol(data_testing)-1)){
data_of_day_va <- as.vector(data_testing[((i-1)*13+1):((i-1)*13+4),j])
data_of_day <- c(data_of_day, data_of_day_va)
}
data_testing_pr[i,4:(ncol(data_testing_pr)-1)] <- data_of_day
data_testing_pr[i,ncol(data_testing_pr)] <- weather_type[weather_type$Month == data_testing_pr[i,2] & weather_type$Day == data_testing_pr[i,3],4]
}
for(i in 1:(ncol(data_testing)-5)){ # rename columns
for(j in 1:4){
colnames(data_testing_pr)[((i-1)*4+j+3)] <- paste0(colnames(data_testing)[(i+4)],j)
}
}
colnames(data_testing_pr)[c(1:3,ncol(data_testing_pr))] <- c('year','month','day','groups')
# perform PR
pr_sub <- c(4:7)#,,12:15
PR_results <- PR_svm(data_training_pr[,4:ncol(data_training_pr)], data_testing_pr[,4:ncol(data_testing_pr)])
#PR_svm(data_training_pr[,c(pr_sub,ncol(data_training_pr))], data_testing_pr[,c(pr_sub,ncol(data_testing_pr))])
PR_results <- as.vector(PR_results)
# evaluate PR
PR_list <- PR_evaluation(PR_results, data_testing_pr$groups)
PR_group <- PR_list[[1]]
PR_eval <- PR_list[[2]]
#------------------------------- Forecasting ------------------------------------
# prepare the training data for MSIII models
data_trn <- data.frame(matrix(0,nrow(data_training_pr)*9,(ncol(data_training)-5)*4+4))
for(i in 1:nrow(data_training_pr)){
data_day <- data_training[which(data_training$Month == data_training_pr[i,'month'] & data_training$Day == data_training_pr[i,'day']),]
#persis_cldness <- data_day[1:(nrow(data_day)-1),'CSI']*data_day[2:nrow(data_day),'ClearSky_GHI']#second hour to the last hour forecasts
#persis_cldness[is.na(persis_cldness)] <- 0
data_day_vecor1 <- NULL
for(k in 1:(ncol(data_day)-5)){
data_day_vecor3 <- NULL
for(j in 1:4){
data_day_vecor2 <- data_day[(j:(j+8)),(k+4)]
data_day_vecor3 <- cbind(data_day_vecor3, data_day_vecor2)
colnames(data_day_vecor3)[j] <- paste0(colnames(data_day)[k+4], j)
}
data_day_vecor1 <- cbind(data_day_vecor1, data_day_vecor3)
data_day_vecor1 <- as.data.frame(data_day_vecor1)
}
data_trn[(-8+9*i):(9*i),4:(ncol(data_trn)-1)] <- data_day_vecor1
data_trn[(-8+9*i):(9*i),ncol(data_trn)] <- data_day[4:12,'target']
data_trn[(-8+9*i):(9*i),1:3] <- data_day[5:13,2:4]
}
colnames(data_trn) <- c('Month','Day','Hour', colnames(data_day_vecor1), 'target')
# prepare the testing data for MSIII models
data_tst <- data.frame(matrix(0,nrow(data_testing_pr)*9,(ncol(data_training)-5)*4+4))
for(i in 1:nrow(data_testing_pr)){
data_day <- data_testing[which(data_testing$Month == data_testing_pr[i,'month'] & data_testing$Day == data_testing_pr[i,'day']),]
#persis_cldness <- data_day[1:(nrow(data_day)-1),'CSI']*data_day[2:nrow(data_day),'ClearSky_GHI']#second hour to the last hour forecasts
#persis_cldness[is.na(persis_cldness)] <- 0
data_day_vecor1 <- NULL
for(k in 1:(ncol(data_day)-5)){
data_day_vecor3 <- NULL
for(j in 1:4){
data_day_vecor2 <- data_day[(j:(j+8)),(k+4)]
data_day_vecor3 <- cbind(data_day_vecor3, data_day_vecor2)
colnames(data_day_vecor3)[j] <- paste0(colnames(data_day)[k+4], j)
}
data_day_vecor1 <- cbind(data_day_vecor1, data_day_vecor3)
data_day_vecor1 <- as.data.frame(data_day_vecor1)
}
data_tst[(-8+9*i):(9*i),4:(ncol(data_tst)-1)] <- data_day_vecor1
data_tst[(-8+9*i):(9*i),ncol(data_tst)] <- data_day[4:12,'target']
data_tst[(-8+9*i):(9*i),1:3] <- data_day[5:13,2:4]
}
colnames(data_tst) <- c('Month','Day','Hour', colnames(data_day_vecor1), 'target')
# normalization
list_norm <- data_normalization1(data_trn)
data_trn_msiii <- list_norm[[1]]
min_max <- list_norm[[2]]
data_tst_msiii <- data_normalization2(data_tst, min_max)
# split training data based on weather types
data_trn_msiii1 <- data.frame(matrix(0,9*(nrow(data_training_pr[data_training_pr$groups=='A',])),ncol(data_trn_msiii)))
data_trn_msiii2 <- data.frame(matrix(0,9*(nrow(data_training_pr[data_training_pr$groups=='B',])),ncol(data_trn_msiii)))
data_trn_msiii3 <- data.frame(matrix(0,9*(nrow(data_training_pr[data_training_pr$groups=='C',])),ncol(data_trn_msiii)))
colnames(data_trn_msiii1) <- colnames(data_trn_msiii)
colnames(data_trn_msiii2) <- colnames(data_trn_msiii)
colnames(data_trn_msiii3) <- colnames(data_trn_msiii)
k = 1
p = 1
q = 1
for(i in 1:nrow(data_training_pr)){
#date_orig <- data_denormalization(data_trn_msii[(1+9*i),1:2],min_max[,1:2])
if(data_training_pr[i,'groups'] == 'A')
{data_trn_msiii1[(1+9*(k-1)):(9*k),] <- data_trn_msiii[(1+9*(i-1)):(9*i),] # search day by day
k = k + 1
}
if(data_training_pr[i,'groups'] == 'B')
{data_trn_msiii2[(1+9*(p-1)):(9*p),] <- data_trn_msiii[(1+9*(i-1)):(9*i),]
p = p + 1
}
if(data_training_pr[i,'groups'] == 'C')
{data_trn_msiii3[(1+9*(q-1)):(9*q),] <- data_trn_msiii[(1+9*(i-1)):(9*i),]
q = q + 1
}
}
# split testing data from PR process for forecasting
data_tst_msiii1 <- data.frame(matrix(0,9*(nrow(data_testing_pr[which(PR_results=='A'),])),ncol(data_tst_msiii)))
data_tst_msiii2 <- data.frame(matrix(0,9*(nrow(data_testing_pr[which(PR_results=='B'),])),ncol(data_tst_msiii)))
data_tst_msiii3 <- data.frame(matrix(0,9*(nrow(data_testing_pr[which(PR_results=='C'),])),ncol(data_tst_msiii)))
colnames(data_tst_msiii1) <- colnames(data_tst_msiii)
colnames(data_tst_msiii2) <- colnames(data_tst_msiii)
colnames(data_tst_msiii3) <- colnames(data_tst_msiii)
k = 1
p = 1
q = 1
for(i in 1:length(PR_results)){
#date_orig <- data_denormalization(data_trn_msii[(1+9*i),1:2],min_max[,1:2])
if(PR_results[i] == 'A')
{data_tst_msiii1[(1+9*(k-1)):(9*k),] <- data_tst_msiii[(1+9*(i-1)):(9*i),] # search day by day
k = k + 1
}
if(PR_results[i] == 'B')
{data_tst_msiii2[(1+9*(p-1)):(9*p),] <- data_tst_msiii[(1+9*(i-1)):(9*i),]
p = p + 1
}
if(PR_results[i] == 'C')
{data_tst_msiii3[(1+9*(q-1)):(9*q),] <- data_tst_msiii[(1+9*(i-1)):(9*i),]
q = q + 1
}
}
#------------- prepare the training data for MSII models ---------------
# training data
data_trn_msii1_ <- data.frame(data_training[data_training$Hour==8,2:3],data_training[data_training$Hour==7,5:(ncol(data_training)-1)],
data_training[data_training$Hour==8,'Act_GHI'])
data_trn_msii2_ <- data.frame(data_training[data_training$Hour==9,2:3],data_training[data_training$Hour==8,5:(ncol(data_training)-1)],
data_training[data_training$Hour==9,'Act_GHI'])
data_trn_msii3_ <- data.frame(data_training[data_training$Hour==10,2:3],data_training[data_training$Hour==9,5:(ncol(data_training)-1)],
data_training[data_training$Hour==10,'Act_GHI'])
colnames(data_trn_msii1_) <- c(colnames(data_trn_msii1_)[1:2], colnames(data_training)[5:(ncol(data_training)-1)], 'target')
colnames(data_trn_msii2_) <- c(colnames(data_trn_msii2_)[1:2], colnames(data_training)[5:(ncol(data_training)-1)], 'target')
colnames(data_trn_msii3_) <- c(colnames(data_trn_msii3_)[1:2], colnames(data_training)[5:(ncol(data_training)-1)], 'target')
# testing data
data_tst_msii1_ <- data.frame(data_testing[data_testing$Hour==8,2:3],data_testing[data_testing$Hour==7,5:(ncol(data_training)-1)],
data_testing[data_testing$Hour==8,'Act_GHI'])
data_tst_msii2_ <- data.frame(data_testing[data_testing$Hour==9,2:3],data_testing[data_testing$Hour==8,5:(ncol(data_training)-1)],
data_testing[data_testing$Hour==9,'Act_GHI'])
data_tst_msii3_ <- data.frame(data_testing[data_testing$Hour==10,2:3],data_testing[data_testing$Hour==9,5:(ncol(data_training)-1)],
data_testing[data_testing$Hour==10,'Act_GHI'])
colnames(data_tst_msii1_) <- c(colnames(data_tst_msii1_)[1:2],colnames(data_testing)[5:(ncol(data_training)-1)], 'target')
colnames(data_tst_msii2_) <- c(colnames(data_trn_msii1_)[1:2],colnames(data_testing)[5:(ncol(data_training)-1)], 'target')
colnames(data_tst_msii3_) <- c(colnames(data_trn_msii1_)[1:2],colnames(data_testing)[5:(ncol(data_training)-1)], 'target')
# normalization
list_norm_ii1 <- data_normalization1(data_trn_msii1_)
data_trn_msii1 <- list_norm_ii1[[1]]
min_max_ii1 <- list_norm_ii1[[2]]
data_tst_msii1 <- data_normalization2(data_tst_msii1_, min_max_ii1)
list_norm_ii2 <- data_normalization1(data_trn_msii2_)
data_trn_msii2 <- list_norm_ii2[[1]]
min_max_ii2 <- list_norm_ii2[[2]]
data_tst_msii2 <- data_normalization2(data_tst_msii2_, min_max_ii2)
list_norm_ii3 <- data_normalization1(data_trn_msii3_)
data_trn_msii3 <- list_norm_ii3[[1]]
min_max_ii3 <- list_norm_ii3[[2]]
data_tst_msii3 <- data_normalization2(data_tst_msii3_, min_max_ii3)
#------------------ prepare data for the machine learning benchmarks ---------------------
# training data
data_trn_bench <- data_training[data_training$Hour %in% c(7:18), -1]
# testing data
data_tst_bench <- data_testing[data_testing$Hour %in% c(7:18), -1]
# normalization
list_norm_bench <- data_normalization1(data_trn_bench)
data_trn_trnn <- list_norm_bench[[1]]
min_max_bench <- list_norm_bench[[2]]
data_tst_tstn <- data_normalization2(data_tst_bench, min_max_bench)
View(SAML_benchmarks)
source(paste0(root_code2,'SAML_benchmarks.R'))
result_forc <- SAML_benchmarks(data_trn_msii1, data_tst_msii1, root_MMFF)
results_msii1 <- data.frame(data_denormalization(data_tst_msii1[,1:2], min_max_ii1[,1:2]),rep(8,nrow(data_tst_msii1)),
data_denormalization(result_forc,data.frame(rep(min_max_ii1[length(min_max_ii1)],ncol(result_forc)))))
result_forc <- SAML_benchmarks(data_trn_msii2, data_tst_msii2, root_MMFF)
results_msii2 <- data.frame(data_denormalization(data_tst_msii2[,1:2], min_max_ii2[,1:2]),rep(9,nrow(data_tst_msii2)),
data_denormalization(result_forc,data.frame(rep(min_max_ii2[length(min_max_ii2)],ncol(result_forc)))))
result_forc <- SAML_benchmarks(data_trn_msii3, data_tst_msii3, root_MMFF)
results_msii3 <- data.frame(data_denormalization(data_tst_msii3[,1:2], min_max_ii3[,1:2]),rep(10,nrow(data_tst_msii3)),
data_denormalization(result_forc,data.frame(rep(min_max_ii3[length(min_max_ii3)],ncol(result_forc)))))
colnames(results_msii1) <- c(colnames(results_msii1)[1:2],'Hour',colnames(results_msii1)[4:ncol(results_msii1)])
colnames(results_msii2) <- c(colnames(results_msii2)[1:2],'Hour',colnames(results_msii2)[4:ncol(results_msii2)])
colnames(results_msii3) <- c(colnames(results_msii3)[1:2],'Hour',colnames(results_msii3)[4:ncol(results_msii3)])
result_forc <- SAML_benchmarks(data_trn_msiii1, data_tst_msiii1, root_MMFF)
results_msiii1 <- data.frame(data_denormalization(data_tst_msiii1[,1:3], min_max[,1:3]),
data_denormalization(result_forc,data.frame(rep(min_max[length(min_max)],ncol(result_forc)))))
result_forc <- SAML_benchmarks(data_trn_msiii2, data_tst_msiii2, root_MMFF)
results_msiii2 <- data.frame(data_denormalization(data_tst_msiii2[,1:3], min_max[,1:3]),
data_denormalization(result_forc,data.frame(rep(min_max[length(min_max)],ncol(result_forc)))))
result_forc <-  SAML_benchmarks(data_trn_msiii3, data_tst_msiii3, root_MMFF)
results_msiii3 <- data.frame(data_denormalization(data_tst_msiii3[,1:3], min_max[,1:3]),
data_denormalization(result_forc,data.frame(rep(min_max[length(min_max)],ncol(result_forc)))))
#------------------------------------------ benchmark forecasting -------------------------------------------
# persistence of cloudness
result_bench_persis <- data.frame(matrix(0,nrow(data_testing),5))
result_bench_persis[,1:3] <- data_testing[,2:4]
result_bench_persis[,4] <- data_testing$Act_GHI
for(i in 1:nrow(data_testing_pr)){
#result_bench_persis[(1+13*(i-1)),5] <- data_testing[(1+13*(i-1)),'ClearSky_GHI']
result_bench_persis[(2+13*(i-1)):(13*i),5] <- data_testing[(2+13*(i-1)):(13*i),'ClearSky_GHI']*
data_testing[(1+13*(i-1)):(13*i-1),'CSI']
}
#result_bench_persis[,5] <- data_testing$GHI_P1
colnames(result_bench_persis) <- c('Month','Day','Hour','target','Persis')
# machine learning without weather-based classifcation
result_bench_ml_ <- SAML_benchmarks(data_trn_trnn, data_tst_tstn, root_MMFF)
113-106
7/113
102-99
3/102
#--------------------------------  NOTE  ----------------------------------------
# 1 This code is run the training and forecasting codes;
# 2 All you need to change is root_main;
# 3 root_main: WindView folder directory; root_code1: code directory;
#   root_data1: data(Main.csv and other location.csv) directory;
#   root_model1: model saving directory
# 4 Coder: Cong Feng        Date: 2017/12/18       @ DOES Lab, UTD
#--------------------------------------------------------------------------------
# clear R workspace and concole
rm(list=ls(all=TRUE))
cat("\014")
#___________________ Change This Root __________________________
root_main <- '/Users/joeyfueng/Desktop/Rearch/Projects/WindView/'
#_______________________________________________________________
# root entries
root_code1 <- paste0(root_main,'code/') # all the code
root_data1 <- paste0(root_main,'sample data/input/') # training data
root_model1<- paste0(root_main,'model/') # all the models trained by UTD_train.R
root_data2 <- paste0(root_main,'sample data/forecast/') # forecasting input data
root_savefile <- paste0(root_main,'output/') # output files
va_frc <- 'power' # forecasting target variable
source(paste0(root_code1,'UTD_train.R'))
source(paste0(root_code1,'UTD_forecast.R'))
View(UTD_train)
View(UTD_forecast)
# Load in functions
source(paste0(root_code,'data_normalization2.R'))
source(paste0(root_code,'data_denormalization.R'))
source(paste0(root_code,'MMFF_forecast.R'))
source(paste0(root_code,'EvaMetrics.R'))
root_code < root_code1
root_code <- root_code1
root_data <- root_data1
root_model <- root_model1
print('Start the training process...')
part2 <- .5
source(paste0(root_code,'data_normalization1.R'))
source(paste0(root_code,'format_data.R'))
source(paste0(root_code,'MMFF_train.R'))
info_main <- data.frame(read.table(paste0(root_data,'Main.csv'),header = TRUE,sep = ",", fill=TRUE))
View(info_main)
no_file <- 1
file_input <- paste0(info_main[no_file,1], '.csv')
data_loc <- data.frame(read.table(paste0(root_data,file_input),header = TRUE,sep = ","))
data_loc <- data_loc[(nrow(data_loc)-100):nrow(data_loc),] # use the latest 8000 data
data_loc[data_loc==-9999] <- 0
list_norm <- data_normalization1(data_loc[,6:ncol(data_loc)])
data_norm <- list_norm[[1]] # normalized data
max_min <- list_norm[[2]]   # min and max values
th_loc <- info_main[1,2]
no_th <- 1
data_train <- format_data(data_norm, no_th, 'power')
data_train1 <- data_train[1:100,]
View(data_train)
data_train <- format_data(data_norm, no_th, 'power')
data_train1 <- data_train[1:floor(11/12*nrow(data_train)),]
data_train2 <- data_train[(floor(11/12*nrow(data_train))+1):nrow(data_train),]
data_train <- format_data(data_norm, no_th, 'power')
data_train1 <- data_train[1:floor(1/12*nrow(data_train)),]
data_train2 <- data_train[(floor(1/12*nrow(data_train))+1):nrow(data_train),]
MMFF_train(data_train, no_th, root_code, root_model, part2, info_main[no_file,1])
result_hr <- MMFF_forecast(data_train1[,-ncol(data_train1)], info_main[no_file,1], no_th, root_model, root_code) # forecasting code
source(paste0(root_code,'MMFF_forecast.R'))
result_hr <- MMFF_forecast(data_train1[,-ncol(data_train1)], info_main[no_file,1], no_th, root_model, root_code) # forecasting code
View(result_hr)
colnames(result_hr)[14]
result_hr2 <- data.frame(result_hr$gbm4, data_train1$target)
View(result_hr2)
data_train <- format_data(data_norm, no_th, 'power')
data_train1 <- data_train[1:floor(1/12*nrow(data_train)),]
data_train2 <- data_train[(floor(1/12*nrow(data_train))+1):nrow(data_train),]
MMFF_train(data_train, no_th, root_code, root_model, part2, info_main[no_file,1])
result_hr <- MMFF_forecast(data_train1[,-ncol(data_train1)], info_main[no_file,1], no_th, root_model, root_code) # forecasting code
result_hr2 <- data.frame(result_hr$gbm4, data_train1$target)
View(max_min)
rep(as.matrix(max_min[,1]),2)
result_denorm <- data.frame(data_denormalization(as.data.frame(result_hr2), rep(as.matrix(max_min[,1]),2)))
source(paste0(root_code,'data_denormalization.R'))
result_denorm <- data.frame(data_denormalization(as.data.frame(result_hr2), rep(as.matrix(max_min[,1]),2)))
max_min[,1]
View(data_denormalization)
dim(max_min[,1])
as.matrix(max_min[,1])
# define repeat column function
rep.col<-function(x,n){
matrix(rep(x,each=n), ncol=n, byrow=TRUE)
}
result_denorm <- data.frame(data_denormalization(as.data.frame(result_hr2),
rep.col(as.matrix(max_min[,1]),2)))
View(result_denorm)
root_savefile2 <- paste0(root_main,'inter_results/') # intermediate result files
result_denorm <- data.frame(data_denormalization(as.data.frame(result_hr2),
rep.col(as.matrix(max_min[,1]),2)))
colnames(result_denorm) <- c('Forecasts', 'Actuals')
write.table(result_denorm,file = paste0(root_savefile22,info_main[no_file,1], '_',no_th,'_HA_SurrogateData.csv'),row.names = TRUE,na='',col.names = TRUE,sep = ',')
root_savefile22 < root_savefile2
root_savefile22 <- root_savefile2
write.table(result_denorm,file = paste0(root_savefile22,info_main[no_file,1], '_',no_th,'_HA_SurrogateData.csv'),row.names = TRUE,na='',col.names = TRUE,sep = ',')
write.table(result_denorm,file = paste0(root_savefile22,info_main[no_file,1], '_',no_th,'_HA_SurrogateData.csv'),row.names = FALSE,na='',col.names = TRUE,sep = ',')
source('~/Desktop/Rearch/Projects/WindView/executive_function.R')
